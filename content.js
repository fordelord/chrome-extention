// # 1 –ë–∞–∂–∞–Ω–æ –±—É–ª–∏ –±–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è prettier, —â–æ–±–∏ –º—ñ–∂ –Ω–∞–º–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞—Ö, –±—É–ª–æ –º–µ–Ω—å—à–µ —Ä–æ–∑–±—ñ–∂–Ω–æ—Å—Ç–µ–π —ñ –º–∏ –∫—Ä–∞—â–µ –≤—Å—ñ –ø—Ä–∞—Ü—é–≤–∞–ª–∏, –∑–¥–∞—î—Ç—Å—è —Ñ–∞–π–ª–∏ –≤ —Ü—å–æ–º—É –ø—Ä–æ—î–∫—Ç—ñ –Ω–µ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—ñ
// –î–∞–≤–∞–π –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –æ—Å—å —Ü–µ–π –∫–æ–Ω—Ñ—ñ–≥ –∑ AlexCode:
// https://github.com/1alexvash/AlexCodeBlog/blob/master/.prettierrc
//‚úÖ‚úÖ‚úÖ

// # 2 –û —Ü–µ–π, —Ç–∞–π–º–µ—Ä —è–∫ —è —Ä–æ–∑—É–º—ñ—é, –Ω–µ –±—É–¥–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏—Å—å –Ω–∞ –∫–æ–∂–Ω–æ–º—É –Ω–∞ —Å–∞–π—Ç—ñ, —Ç–∞–∫ —è–∫ –≤ –Ω–∞—Å —î –æ–±–º–µ–∂–µ–Ω–Ω—è –≤ —Ñ–∞–π–ª—ñ manifest.json?‚ùì‚ùì‚ùì
// # 3 –î–æ–¥–∞—Ç–∫–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è, –±–µ–∑ window, –≤ –Ω–∞—Å –≤ browser extenshion —Ç–∞–π–º–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è?‚ùì‚ùì‚ùì
// #4 —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é, –∫—Ä–∞—â–µ –±—É–ª–æ –±–∏ –ø–æ—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç–∏ —ñ –≤–∏–Ω–µ—Å—Ç–∏ –≤ –æ–∫—Ä–µ–º—É —Ñ—É–Ω–∫—Ü—ñ—é, —Ç–∞–∫ –±–∏ –ª–æ–≥—ñ–∫–∞ –±—É–ª–∞ –±–∏ –∫—Ä–∞—â–µ —Ä–æ–∑–¥—ñ–ª–µ–Ω–∞‚úÖ‚úÖ‚úÖ
// –©–æ—Å—å —Ç–∏–ø—É —Ç–∞–∫–æ–≥–æ –≤ —ñ–¥–µ–∞–ª—ñ, —â–æ–±–∏ –ø–æ –∫–æ–∂–Ω–æ–º—É —Å–∫—Ä–∏–ø—Ç—É –±—É–ª–∞ –æ–∫—Ä–µ–º–∞ –ª–æ–≥—ñ–∫–∞, –∑–∞—Ä–∞–∑ –≤–∞–∂–∫–æ —Å–∫–∞–∑–∞—Ç–∏, —â–æ –¥–æ —á–æ–≥–æ –≤—ñ–¥–Ω–æ—Å–∏—Ç—Å—è
/*
		const runApp = () => {
			script1();
			script2();‚úÖ
		}

		window.setInterval(() => {
			runApp();
		})
	*/
const runApp = () => {
  // #5 –ß–æ–º—É –Ω–∞ —Å–ª–æ–≤–æ todoist –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ñ —î –æ—Å–æ–±–ª–∏–≤–∞ –ø—ñ–¥—Å–≤—ñ—Ç–∫–∞ –≤—ñ–¥ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞? —Ü—ñ–∫–∞–≤–æ ü§î ‚ùì‚ùì‚ùì
  if (window.location.href.includes("https://todoist.com/app/activity")) {
    const parent = document.getElementsByClassName("section");
    const items = document.querySelectorAll("ul.items");
    const itemsArray = Array.from(items);
    const regex = /^.*\:\s*(?<score>\d+)\s*$/;

    const getItemsScores = (items) => {
      const regex = /^.+\[(?<score>\d+)\]\s*.*$/;
      return items.map((item) => {
        const childNodes = [...item.childNodes];
        return childNodes
          .map((i) => {
            if (
              i.childNodes[0].childNodes[1].childNodes[0].dataset.svgsPath ===
              "sm1/notification_completed.svg"
            ) {
              return getItemScore(i.innerText, regex) ?? 0;
            } else {
              return 0;
            }

            // #6 –∑–∞–º—ñ–Ω–∏ –∞—Ç—Ä—ñ–±—É—Ç–∏ –Ω–∞ accumulator —ñ currentValue
            // –Ü —Å—Ç–∞—Ä–∞–π—Å—è –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫—ñ —ñ–º–µ–Ω–∞ –¥–ª—è –∑–º—ñ–Ω–Ω–∏—Ö, —Ç–∞–∫ —è–∫ –≤–æ–Ω–∏ –Ω–µ –¥—É–∂–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ñ
            // –ö–æ–ª–∏ –±–∞—á–∏—à —è–∫—É—Å—å –∑–º—ñ–Ω—É —Ç–∏–ø—É u, i, o, –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≥–∞–¥–∞—Ç–∏, —â–æ —Ü–µ –∑–Ω–∞—á–∏—Ç—å
            // –ö–æ–º–ø—é—Ç–µ—Ä—É –≤—Å–µ—Ä—ñ–≤–Ω–æ, –∞ –ª—é–¥–∏–Ω–∞ –Ω–µ –∑—Ä–æ–∑—É–º—ñ—î‚úÖ‚úÖ‚úÖ
          })
          .reduce((accumulator, currentValue) => accumulator + currentValue, 0);
      });
    };
    // #7 –ü–µ—Ä–µ–¥ —ñ –ø—ñ—Å–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó –º–∞—î –±—É—Ç–∏ –ø—É—Å—Ç–∞ –ª—ñ–Ω—ñ—è, —â–æ–±–∏ —Ç–µ–∫—Å—Ç —á–∏—Ç–∞–≤—Å—è —è –∫–Ω–∏–∂–Ω–∫–∞ –∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º–∏ (–ü—Ä–∞–≤–∏–ª–æ –∑ clean code)‚úÖ‚úÖ‚úÖ
    // #8 –ó–¥–∞—î—Ç—Å—è —â–æ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Å—Ç–∞—Ç–∏—á–Ω–∏–π –∞—Ç—Ä–∏–±—É—Ç regex, —Ç–æ–º—É –π–æ–≥–æ –º–æ–∂–Ω–∞ –≤–∏–Ω–µ—Å—Ç–∏ –∑ —Ñ—É–Ω–∫—Ü—ñ—ó‚úÖ‚úÖ‚úÖ
    const getItemScore = (name, regex) => {
      const scoreText = name.replaceAll("\n", " ").match(regex)?.groups?.["score"];
      return scoreText ? parseInt(scoreText) : undefined;
    };

    const pastDivToPage = (points, numForId, parent) => {
      const div1 = document.createElement("div");

      const counterNum = parent[numForId].childNodes[0];
      // #9 –ù–µ –∑–∞–±—É–≤–∞–π –ø—Ä–æ template literal `Total Score For This Day: ${points}` —Ç–µ–∂ –≤–∞—Ä—ñ–∞–Ω—Ç‚úÖ‚úÖ‚úÖ
      div1.innerHTML = `Total Score For This Day: ${points}`;
      div1.id = `counter`;
      div1.style.fontSize = "24px";
      div1.style.fontWeight = 600;
      if (counterNum.id === "counter" && getItemScore(counterNum.textContent, regex) !== points) {
        counterNum.remove();
        todoist;
        div1.innerHTML = "Total Score For This Day: " + points;
        counterNum.before(div1);
      }
      if (counterNum.id === "counter") {
        return;
      }
      counterNum.before(div1);
    };

    // #10 –¢—É—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ arrow function‚ùì‚ùì‚ùì
    // index –∑–∞–≤–∂–¥–∏, –ø–æ—á–∏–Ω–∞—î—Ç—Å—è –∑ 0, —Ç–æ–º—É –º–æ–∂–Ω–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –π–æ–≥–æ —è–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä ‚úÖ‚úÖ‚úÖ
    getItemsScores(itemsArray).map((item, index) => {
      return pastDivToPage(item, index, parent);
    });

    function getIcons() {
      const icons = document.getElementsByClassName("avatar_event_icon");
      // #11 —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–π —Å–∞–º–∏–π regex –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—Å—è –≤ –ø—Ä–æ–≥—Ä–∞–º—ñ, –≤–∏–Ω–µ–∏ –π–æ–≥–æ –Ω–∞–≤–µ—Ä—Ö –≤ –æ–∫—Ä–µ–º—É –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É‚úÖ‚úÖ‚úÖ
      Array.from(icons).map((element) => {
        // #12 elementParent –ø–æ—Ö–æ–∂–µ –Ω–∞ python, –≤ JS –≤ –Ω–∞—Å camelCase –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—Å—è —Ç–æ–º—É –º–∞—î –±—É—Ç–∏ parentElement‚úÖ‚úÖ‚úÖ
        const elementParent = element.parentElement.parentElement.childNodes[1].childNodes[0];
        if (element.children[0].dataset.svgsPath !== "sm1/notification_completed.svg") {
          return;
        }

        const text = elementParent.childNodes[2].childNodes[0].childNodes[0].textContent;

        const score = getItemScore(text, regex);

        // # 13 score === undefined, –ª–µ–≥—à–µ —á–∏—Ç–∞—î—Ç—Å—è‚úÖ‚úÖ‚úÖ
        // clean code –ø—Ä–∞–≤–∏–ª–æ –ø—Ä–æ positive checks vs negative checks –º–æ–∂–µ—à –≥–ª—è–Ω—É—Ç–∏ –≤ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ
        // —Ç–∞–∫ —è–∫ –∑–Ω–∞–∫–∏ !! –æ–∫–ª–∏–∫—É, —è–∫ –ø—Ä–∞–≤–∏–ª–æ –≤–∞–∂–∫–æ –≥–æ–ª–æ–≤–æ—é –æ–±—Ä–æ–±–ª—è—Ç–∏
        if (score === undefined) {
          elementParent.childNodes[2].style.backgroundColor = "red";
        }
      });
    }
    getIcons();
  } else if (window.location.href.includes("https://todoist.com/app/project")) {
    if (document.getElementsByClassName("button-href").length < 1) {
      const list = document.getElementsByClassName("items");
      Array.from(list[0].childNodes).map((element) => {
        const button = document.createElement("a");
        const dataSet = element.dataset.itemId;
        const btn_link_parent = element.childNodes[0].childNodes[4].childNodes;
        button.innerHTML = "Link";
        button.className = "button-href";
        button.style.fontSize = "18px";
        button.style.display = "absolute";
        button.style.marginRight = "50px";

        element.addEventListener("mouseenter", () => {
          if (!(btn_link_parent[0].className === "button-href")) {
            btn_link_parent[0].before(button);
          }
        });
        // #14 –¢—É—Ç template literal –≤–∑–∞–≥–∞–ª—ñ –Ω–∞ —É—Ä–∞ –∑–∞–π–¥–µ‚úÖ‚úÖ‚úÖ
        const url = `https://todoist.com/app/task/${dataSet}/0`;
        if (btn_link_parent.length > 1) btn_link_parent[0].before(button);
        // #15 —Ç–∞–±—É–ª—è—Ü—ñ—è –Ω–µ –≤–∏—Ä—ñ–≤–Ω—è–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π prettier‚úÖ‚úÖ‚úÖ
        button.addEventListener("click", () => {
          window.open(url, "_blank").focus();
        });
      });
    }
  }
};

window.setInterval(function () {
  runApp();
}, 1000);
